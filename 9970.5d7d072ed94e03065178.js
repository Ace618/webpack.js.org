"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9970],{9970:function(e,a,n){n.r(a),n(7378);var t=n(2682),s=["components"];function p(){return p=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},p.apply(this,arguments)}function o(e){var a=e.components,n=function(e,a){if(null==e)return{};var n,t,s=function(e,a){if(null==e)return{};var n,t,s={},p=Object.keys(e);for(t=0;t<p.length;t++)n=p[t],a.indexOf(n)>=0||(s[n]=e[n]);return s}(e,a);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(t=0;t<p.length;t++)n=p[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}(e,s);return(0,t.kt)("wrapper",p({components:a},n),(0,t.kt)("p",null,(0,t.kt)("em",{parentName:"p"},"tree shaking")," 是一个术语，通常用于描述移除 JavaScript 上下文中的未引用代码(dead-code)。它依赖于 ES2015 模块语法的 ",(0,t.kt)("a",{href:"http://exploringjs.com/es6/ch_modules.html#static-module-structure",parentName:"p"},"静态结构")," 特性，例如 ",(0,t.kt)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"import"))," 和 ",(0,t.kt)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"export")),"。这个术语和概念实际上是由 ES2015 模块打包工具 ",(0,t.kt)("a",{href:"https://github.com/rollup/rollup",parentName:"p"},"rollup")," 普及起来的。"),(0,t.kt)("p",null,"webpack 2 正式版本内置支持 ES2015 模块（也叫做 ",(0,t.kt)("em",{parentName:"p"},"harmony modules"),"）和未使用模块检测能力。新的 webpack 4 正式版本扩展了此检测能力，通过 ",(0,t.kt)("inlineCode",{parentName:"p"},"package.json")," 的 ",(0,t.kt)("inlineCode",{parentName:"p"},'"sideEffects"'),' 属性作为标记，向 compiler 提供提示，表明项目中的哪些文件是 "pure(纯正 ES2015 模块)"，由此可以安全地删除文件中未使用的部分。'),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},"本指南的继承自 ",(0,t.kt)("a",{href:"/guides/getting-started",parentName:"p"},"起步")," 指南。如果你尚未阅读该指南，请先行阅读。")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"add-a-utility",parentName:"h2"}),"添加一个通用模块",(0,t.kt)("a",{href:"#add-a-utility","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"在我们的项目中添加一个新的通用模块文件 ",(0,t.kt)("inlineCode",{parentName:"p"},"src/math.js"),"，并导出两个函数："),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"project")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},"webpack-demo\n|- package.json\n|- package-lock.json\n|- webpack.config.js\n|- /dist\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- bundle.js\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- index.html\n")),"|- /src\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- index.js\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- math.js\n")),"|- /node_modules")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"src/math.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"square"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"x"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return")," x ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"*")," x",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"cube"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"x"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return")," x ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"*")," x ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"*")," x",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"))),(0,t.kt)("p",null,"需要将 ",(0,t.kt)("inlineCode",{parentName:"p"},"mode")," 配置设置成",(0,t.kt)("a",{href:"/configuration/mode/#mode-development",parentName:"p"},"development"),"，以确定 bundle 不会被压缩："),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},"const path = require('path');\n\nmodule.exports = {\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," entry: './src/index.js',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," output: {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   filename: 'bundle.js',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   path: path.resolve(__dirname, 'dist'),\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," },\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," mode: 'development',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," optimization: {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   usedExports: true,\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," },\n")),"};")),(0,t.kt)("p",null,"配置完这些后，更新入口脚本，使用其中一个新方法，并且为了简化示例，我们先将 ",(0,t.kt)("inlineCode",{parentName:"p"},"lodash")," 删除："),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"src/index.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"}," import _ from 'lodash';\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," import { cube } from './math.js';\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," function component() {\n")),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   const element = document.createElement('div');\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   const element = document.createElement('pre');\n")),"\n",(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   // Lodash, now imported by this script\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   element.innerHTML = [\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     'Hello webpack!',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     '5 cubed is equal to ' + cube(5)\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   ].join('\\n\\n');\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   return element;\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," }\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," document.body.appendChild(component());")))),(0,t.kt)("p",null,"注意，我们",(0,t.kt)("strong",{parentName:"p"},"没有从 ",(0,t.kt)("inlineCode",{parentName:"strong"},"src/math.js")," 模块中 ",(0,t.kt)("inlineCode",{parentName:"strong"},"import")," 另外一个 ",(0,t.kt)("inlineCode",{parentName:"strong"},"square")," 方法"),"。这个函数就是所谓的“未引用代码(dead code)”，也就是说，应该删除掉未被引用的 ",(0,t.kt)("inlineCode",{parentName:"p"},"export"),"。现在运行 npm script ",(0,t.kt)("inlineCode",{parentName:"p"},"npm run build"),"，并查看输出的 bundle："),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"dist/bundle.js (around lines 90 - 100)")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* 1 */"),"\n",(0,t.kt)("span",{className:"token comment",parentName:"code"},"/***/")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"span"},",")," __webpack_exports__",(0,t.kt)("span",{className:"token punctuation",parentName:"span"},",")," __webpack_require__"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'use strict'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* unused harmony export square */"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* harmony export (immutable) */")," __webpack_exports__",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token string",parentName:"code"},"'a'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," cube",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"square"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"x"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return")," x ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"*")," x",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"cube"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"x"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return")," x ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"*")," x ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"*")," x",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"注意，上面的 ",(0,t.kt)("inlineCode",{parentName:"p"},"unused harmony export square")," 注释。如果你观察它下面的代码，你会注意到虽然我们没有引用 ",(0,t.kt)("inlineCode",{parentName:"p"},"square"),"，但它仍然被包含在 bundle 中。我们将在后面的章节解决这个问题。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"mark-the-file-as-side-effect-free",parentName:"h2"}),"将文件标记为 side-effect-free(无副作用)",(0,t.kt)("a",{href:"#mark-the-file-as-side-effect-free","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"在一个纯粹的 ESM 模块世界中，很容易识别出哪些文件有副作用。然而，我们的项目无法达到这种纯度，所以，此时有必要提示 webpack compiler 哪些代码是“纯粹部分”。"),(0,t.kt)("p",null,"通过 package.json 的 ",(0,t.kt)("inlineCode",{parentName:"p"},'"sideEffects"')," 属性，来实现这种方式。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-json",parentName:"pre"},(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token property",parentName:"code"},'"name"'),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},'"your-project"'),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token property",parentName:"code"},'"sideEffects"'),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token boolean",parentName:"code"},"false"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"))),(0,t.kt)("p",null,"如果所有代码都不包含副作用，我们就可以简单地将该属性标记为 ",(0,t.kt)("inlineCode",{parentName:"p"},"false"),"，来告知 webpack 它可以安全地删除未用到的 export。"),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},'"side effect(副作用)" 的定义是，在导入时会执行特殊行为的代码，而不是仅仅暴露一个 export 或多个 export。举例说明，例如 polyfill，它影响全局作用域，并且通常不提供 export。')),(0,t.kt)("p",null,"如果你的代码确实有一些副作用，可以改为提供一个数组："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-json",parentName:"pre"},(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token property",parentName:"code"},'"name"'),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},'"your-project"'),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token property",parentName:"code"},'"sideEffects"'),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token string",parentName:"code"},'"./src/some-side-effectful-file.js"'),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"))),(0,t.kt)("p",null,"此数组支持简单的 glob 模式匹配相关文件。其内部使用了 ",(0,t.kt)("a",{href:"https://github.com/fitzgen/glob-to-regexp",parentName:"p"},"glob-to-regexp"),"（支持：",(0,t.kt)("inlineCode",{parentName:"p"},"*"),"，",(0,t.kt)("inlineCode",{parentName:"p"},"**"),"，",(0,t.kt)("inlineCode",{parentName:"p"},"{a,b}"),"，",(0,t.kt)("inlineCode",{parentName:"p"},"[a-z]"),"）。如果匹配模式为 ",(0,t.kt)("inlineCode",{parentName:"p"},"*.css"),"，且不包含 ",(0,t.kt)("inlineCode",{parentName:"p"},"/"),"，将被视为 ",(0,t.kt)("inlineCode",{parentName:"p"},"**/*.css"),"。"),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},"注意，所有导入文件都会受到 tree shaking 的影响。这意味着，如果在项目中使用类似 ",(0,t.kt)("inlineCode",{parentName:"p"},"css-loader")," 并 import 一个 CSS 文件，则需要将其添加到 side effect 列表中，以免在生产模式中无意中将它删除：")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-json",parentName:"pre"},(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token property",parentName:"code"},'"name"'),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},'"your-project"'),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token property",parentName:"code"},'"sideEffects"'),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token string",parentName:"code"},'"./src/some-side-effectful-file.js"'),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},'"*.css"'),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"))),(0,t.kt)("p",null,"最后，还可以在 ",(0,t.kt)("a",{href:"/configuration/module/#modulerules",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"module.rules")," 配置选项")," 中设置 ",(0,t.kt)("inlineCode",{parentName:"p"},'"sideEffects"'),"。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"clarifying-tree-shaking-and-sideeffects",parentName:"h2"}),"解释 tree shaking 和 ",(0,t.kt)("inlineCode",{parentName:"h2"},"sideEffects"),(0,t.kt)("a",{href:"#clarifying-tree-shaking-and-sideeffects","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("a",{href:"/configuration/optimization/#optimizationsideeffects",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"sideEffects"))," 和 ",(0,t.kt)("a",{href:"/configuration/optimization/#optimizationusedexports",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"usedExports")),"（更多被认为是 tree shaking）是两种不同的优化方式。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"sideEffects")," 更为有效")," 是因为它允许跳过整个模块/文件和整个文件子树。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"usedExports")," 依赖于 ",(0,t.kt)("a",{href:"https://github.com/terser-js/terser",parentName:"p"},"terser")," 去检测语句中的副作用。它是一个 JavaScript 任务而且没有像 ",(0,t.kt)("inlineCode",{parentName:"p"},"sideEffects")," 一样简单直接。而且它不能跳转子树/依赖由于细则中说副作用需要被评估。尽管导出函数能运作如常，但 React 框架的高阶函数（HOC）在这种情况下是会出问题的。"),(0,t.kt)("p",null,"让我们来看一个例子："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," Button ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'@shopify/polaris'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"打包前的文件版本看起来是这样的："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," hoistStatics ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'hoist-non-react-statics'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"Button"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"_ref"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"merge"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," _final ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"for")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," _len ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," arguments",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"length",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," objs ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"Array"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"_len",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," _key ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token number",parentName:"code"},"0"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n    _key ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"<")," _len",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n    _key",(0,t.kt)("span",{className:"token operator",parentName:"code"},"++"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    objs",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"_key",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," arguments",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"_key",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"for")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," _i ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token number",parentName:"code"},"0"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," _objs ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," objs",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";")," _i ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"<")," _objs",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"length",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";")," _i",(0,t.kt)("span",{className:"token operator",parentName:"code"},"++"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," obj ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," _objs",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"_i",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n    ",(0,t.kt)("span",{className:"token function",parentName:"code"},"mergeRecursively"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"_final",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," obj",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return")," _final",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"withAppProvider"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"addProvider"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"WrappedComponent"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," WithProvider ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"="),"\n      ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"/*#__PURE__*/"),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"_React$Component"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n        ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return")," WithProvider",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"Component",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n    WithProvider",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"contextTypes ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," WrappedComponent",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"contextTypes\n      ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"?")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"merge"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"WrappedComponent",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"contextTypes",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," polarisAppProviderContextTypes",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\n      ",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," polarisAppProviderContextTypes",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," FinalComponent ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"hoistStatics"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"WithProvider",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," WrappedComponent",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return")," FinalComponent",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," Button$",(0,t.kt)("span",{className:"token number",parentName:"code"},"1")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"withAppProvider"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"Button",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// ...,"),"\n  Button$",(0,t.kt)("span",{className:"token number",parentName:"code"},"1"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"当 ",(0,t.kt)("inlineCode",{parentName:"p"},"Button")," 没有被使用，你可以有效地清除掉 ",(0,t.kt)("inlineCode",{parentName:"p"},"export { Button$1 };")," 且保留所有剩下的代码。那问题来了，“这段代码会有任何副作用或它能被安全都清理掉吗？”。很难说，尤其是这 ",(0,t.kt)("inlineCode",{parentName:"p"},"withAppProvider()(Button)")," 这段代码。",(0,t.kt)("inlineCode",{parentName:"p"},"withAppProvider")," 被调用，而且返回的值也被调用。当调用 ",(0,t.kt)("inlineCode",{parentName:"p"},"merge")," 或 ",(0,t.kt)("inlineCode",{parentName:"p"},"hoistStatics")," 会有任何副作用吗？当给 ",(0,t.kt)("inlineCode",{parentName:"p"},"WithProvider.contextTypes")," (Setter?) 赋值或当读取 ",(0,t.kt)("inlineCode",{parentName:"p"},"WrappedComponent.contextTypes")," (Getter) 的时候，会有任何副作用吗？"),(0,t.kt)("p",null,"实际上，Terser 尝试去解决以上的问题，但在很多情况下，它不太确定。但这不会意味着 terser 由于无法解决这些问题而运作得不好，而是由于在 JavaScript 这种动态语言中实在太难去确定。"),(0,t.kt)("p",null,"但我们可以通过 ",(0,t.kt)("inlineCode",{parentName:"p"},"/*#__PURE__*/")," 注释来帮忙 terser。它给一个语句标记为没有副作用。就这样一个简单的改变就能够使下面的代码被 tree-shake:"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," Button$",(0,t.kt)("span",{className:"token number",parentName:"code"},"1")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"/*#__PURE__*/")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"withAppProvider"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"Button",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"这会使得这段代码被过滤，但仍然会有一些引入的问题，需要对其进行评估，因为它们产生了副作用。"),(0,t.kt)("p",null,"为了解决这个问题，我们需要在 ",(0,t.kt)("inlineCode",{parentName:"p"},"package.json")," 中添加 ",(0,t.kt)("a",{href:"/guides/tree-shaking/#mark-the-file-as-side-effect-free",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},'"sideEffects"'))," 属性。"),(0,t.kt)("p",null,"它类似于 ",(0,t.kt)("inlineCode",{parentName:"p"},"/*#__PURE__*/")," 但是作用于模块的层面，而不是代码语句的层面。它表示的意思是(指",(0,t.kt)("inlineCode",{parentName:"p"},'"sideEffects"')," 属性)：“如果被标记为无副作用的模块没有被直接导出使用，打包工具会跳过进行模块的副作用分析评估。”。"),(0,t.kt)("p",null,"在一个 ",(0,t.kt)("inlineCode",{parentName:"p"},"Shopify Polaris")," 的例子，原有的模块如下："),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"index.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./configure'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"*")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./types'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"*")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./components'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"components/index.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"default")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"as")," Breadcrumbs ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./Breadcrumbs'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"default")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"as")," Button",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," buttonFrom",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," buttonsFrom ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./Button'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"default")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"as")," ButtonGroup ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./ButtonGroup'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// ..."))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"package.json")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-json",parentName:"pre"},(0,t.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n",(0,t.kt)("span",{className:"token property",parentName:"code"},'"sideEffects"'),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"\n  ",(0,t.kt)("span",{className:"token string",parentName:"code"},'"**/*.css"'),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token string",parentName:"code"},'"**/*.scss"'),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token string",parentName:"code"},'"./esnext/index.js"'),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token string",parentName:"code"},'"./esnext/configure.js"'),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// ..."))),(0,t.kt)("p",null,"对于代码 ",(0,t.kt)("inlineCode",{parentName:"p"},'import { Button } from "@shopify/polaris";')," 它有以下的暗示："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"导入它：导入并包含该模块，分析评估它并继续进行依赖分析"),(0,t.kt)("li",{parentName:"ul"},"跳过它：不导入它，不分析评估它但会继续进行依赖分析"),(0,t.kt)("li",{parentName:"ul"},"排除它：不导入它，不评估且不做依赖分析")),(0,t.kt)("p",null,"以下是每个匹配到的资源的情况："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"index.js"),": 没有直接的导出被使用，但被标记为有副作用 -> 导入它"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"configure.js"),": 没有导出被使用，但被标记为有副作用 -> 导入它"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"types/index.js"),": 没有导出被使用，没有被标记为有副作用 -> 排除它"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"components/index.js"),": 没有导出被使用，没有被标记为有副作用，但重新导出的导出内容被使用了 -> 跳过它"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"components/Breadcrumbs.js"),": 没有导出被使用，没有被标记为有副作用 -> 排除它。这也会排除所有如同 ",(0,t.kt)("inlineCode",{parentName:"li"},"components/Breadcrumbs.css")," 的依赖，尽管它们都被标记为有副作用。"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"components/Button.js"),": 直接的导出被使用，没有被标记为有副作用 -> 导入它"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"components/Button.css"),": 没有导出被使用，但被标记为有副作用 -> 导入它")),(0,t.kt)("p",null,"在这种情况下，只有 4 个模块被导入到 bundle 中："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"index.js"),": 基本为空的"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"configure.js")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"components/Button.js")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"components/Button.css"))),(0,t.kt)("p",null,"在这次的优化后，其它的优化项目都可以应用。例如：从 ",(0,t.kt)("inlineCode",{parentName:"p"},"Button.js")," 导出 的",(0,t.kt)("inlineCode",{parentName:"p"},"buttonFrom")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"buttonsFrom")," 也没有被使用。",(0,t.kt)("inlineCode",{parentName:"p"},"usedExports")," 优化会捡起这些代码而且 terser 会能够从 bundle 中把这些语句摘除出来。"),(0,t.kt)("p",null,"模块合并也会应用。所以这 4 个模块，加上入口的模块（也可能有更多的依赖）会被合并。",(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"index.js")," 最终没有生成代码"),"."),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"mark-a-function-call-as-side-effect-free",parentName:"h2"}),"将函数调用标记为无副作用",(0,t.kt)("a",{href:"#mark-a-function-call-as-side-effect-free","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"是可以告诉 webpack 一个函数调用是无副作用的，只要通过 ",(0,t.kt)("inlineCode",{parentName:"p"},"/*#__PURE__*/")," 注释。它可以被放到函数调用之前，用来标记它们是无副作用的(pure)。传到函数中的入参是无法被刚才的注释所标记，需要单独每一个标记才可以。如果一个没被使用的变量定义的初始值被认为是无副作用的（pure），它会被标记为死代码，不会被执行且会被压缩工具清除掉。当 ",(0,t.kt)("a",{href:"/configuration/optimization/#optimizationinnergraph",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"optimization.innerGraph"))," 被设置成 ",(0,t.kt)("inlineCode",{parentName:"p"},"true")," 时这个行为会被启用。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"file.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token comment",parentName:"code"},"/*#__PURE__*/")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"double"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token number",parentName:"code"},"55"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"minify-the-output",parentName:"h2"}),"压缩输出结果",(0,t.kt)("a",{href:"#minify-the-output","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"通过 ",(0,t.kt)("inlineCode",{parentName:"p"},"import")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"export")," 语法，我们已经找出需要删除的“未引用代码(dead code)”，然而，不仅仅是要找出，还要在 bundle 中删除它们。为此，我们需要将 ",(0,t.kt)("inlineCode",{parentName:"p"},"mode")," 配置选项设置为 ",(0,t.kt)("a",{href:"/configuration/mode/#mode-production",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"production")),"。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},"const path = require('path');\n\nmodule.exports = {\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," entry: './src/index.js',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," output: {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   filename: 'bundle.js',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   path: path.resolve(__dirname, 'dist'),\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," },\n")),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"}," mode: 'development',\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"}," optimization: {\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   usedExports: true,\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"}," }\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," mode: 'production',\n")),"};")),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},"注意，也可以在命令行接口中使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"--optimize-minimize")," 标记，来启用 ",(0,t.kt)("inlineCode",{parentName:"p"},"TerserPlugin"),"。")),(0,t.kt)("p",null,"准备就绪后，然后运行另一个命令 ",(0,t.kt)("inlineCode",{parentName:"p"},"npm run build"),"，看看输出结果有没有发生改变。"),(0,t.kt)("p",null,"你发现 ",(0,t.kt)("inlineCode",{parentName:"p"},"dist/bundle.js")," 中的差异了吗？现在整个 bundle 都已经被 minify(压缩) 和 mangle(混淆破坏)，但是如果仔细观察，则不会看到引入 ",(0,t.kt)("inlineCode",{parentName:"p"},"square")," 函数，但能看到 ",(0,t.kt)("inlineCode",{parentName:"p"},"cube")," 函数的混淆破坏版本（",(0,t.kt)("inlineCode",{parentName:"p"},"function r(e){return e*e*e}n.a=r"),"）。现在，随着 minification(代码压缩) 和 tree shaking，我们的 bundle 减小几个字节！虽然，在这个特定示例中，可能看起来没有减少很多，但是，在有着复杂依赖树的大型应用程序上运行 tree shaking 时，会对 bundle 产生显著的体积优化。"),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},"在使用 tree shaking 时必须有 ",(0,t.kt)("a",{href:"/plugins/module-concatenation-plugin",parentName:"p"},"ModuleConcatenationPlugin")," 的支持，您可以通过设置配置项 ",(0,t.kt)("inlineCode",{parentName:"p"},'mode: "production"')," 以启用它。如果您没有如此做，请记得手动引入 ",(0,t.kt)("a",{href:"/plugins/module-concatenation-plugin",parentName:"p"},"ModuleConcatenationPlugin"),"。")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"conclusion",parentName:"h2"}),"结论",(0,t.kt)("a",{href:"#conclusion","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"我们学到为了利用 ",(0,t.kt)("em",{parentName:"p"},"tree shaking")," 的优势， 你必须..."),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"使用 ES2015 模块语法（即 ",(0,t.kt)("inlineCode",{parentName:"li"},"import")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"export"),"）。"),(0,t.kt)("li",{parentName:"ul"},"确保没有编译器将您的 ES2015 模块语法转换为 CommonJS 的（顺带一提，这是现在常用的 @babel/preset-env 的默认行为，详细信息请参阅",(0,t.kt)("a",{href:"https://babeljs.io/docs/en/babel-preset-env#modules",parentName:"li"},"文档"),"）。"),(0,t.kt)("li",{parentName:"ul"},"在项目的 ",(0,t.kt)("inlineCode",{parentName:"li"},"package.json")," 文件中，添加 ",(0,t.kt)("inlineCode",{parentName:"li"},'"sideEffects"')," 属性。"),(0,t.kt)("li",{parentName:"ul"},"使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"mode")," 为 ",(0,t.kt)("inlineCode",{parentName:"li"},'"production"')," 的配置项以启用",(0,t.kt)("a",{href:"/concepts/#mode",parentName:"li"},"更多优化项"),"，包括压缩代码与 tree shaking。")),(0,t.kt)("p",null,"你可以将应用程序想象成一棵树。绿色表示实际用到的 source code(源码) 和 library(库)，是树上活的树叶。灰色表示未引用代码，是秋天树上枯萎的树叶。为了除去死去的树叶，你必须摇动这棵树，使它们落下。"),(0,t.kt)("p",null,"如果你对优化输出很感兴趣，请进入到下个指南，来了解 ",(0,t.kt)("a",{href:"/guides/production",parentName:"p"},"生产环境")," 构建的详细细节。"))}o.isMDXComponent=!0,a.default=o}}]);